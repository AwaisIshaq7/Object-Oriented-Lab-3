#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Task {
public:
    string description;
    bool completed;
    Task(string desc) : description(desc), completed(false) {}

    void display() {
        cout << (completed  ? "[X] " : "[ ] ") << description << endl;
    }
};

class ToDoList {
    vector<Task*> tasks;
public:   //To add task
    void addTask(const string& desc) { tasks.push_back(new Task(desc)); }

    void listTasks() {
        for (auto& task : tasks) {
            task->display();
        }
    }
    void markTaskAsCompleted(int id) {
        if (id < 1 || id > tasks.size()) {
            cout << "Invalid task ID." << endl;
            return;
        }
        tasks[id - 1]->completed = true;
    }

    ~ToDoList() {
        for (auto& task : tasks) {
            delete task;
        }
    }
};
int main() {
    ToDoList myList;
    myList.addTask("Finish Lab 1");
    myList.addTask("Submit Lab 1");
    myList.addTask("Complete Assigns");
    myList.addTask("Study for the exams");

    myList.listTasks();
    cout << "Assuming task 1 and 3 as completed..." << endl;
    myList.markTaskAsCompleted(1);
    myList.markTaskAsCompleted(3);
    myList.listTasks();

    return 0;
}